{"ast":null,"code":"var _jsxFileName = \"/Users/serwis/Desktop/kalkulator-spalania/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Average() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"Kalkulator \\u015Bredniego spalania na 100 km\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Spalone paliwo w litrach: \", React.createElement(\"input\", {\n    type: \"number\",\n    name: \"fuel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Ilo\\u015B\\u0107 przejechanych kilometr\\xF3w: \", React.createElement(\"input\", {\n    type: \"number\",\n    name: \"km\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Cena litra paliwa (opcjonalne): \", React.createElement(\"input\", {\n    type: \"number\",\n    name: \"cost\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Oblicz\"));\n}\n\nfunction Cost() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Kalkulator kosztu przejechania trasy\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"D\\u0142ugo\\u015B\\u0107 planowanej trasy w kilometrach: \", React.createElement(\"input\", {\n    type: \"number\",\n    name: \"km\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"\\u015Arednie spalanie w litrach na 100 km: \", React.createElement(\"input\", {\n    type: \"number\",\n    name: \"fuel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Cena litra paliwa: \", React.createElement(\"input\", {\n    type: \"number\",\n    name: \"cost\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Oblicz\"), React.createElement(Average, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n}\n\nReactDOM.render(React.createElement(Cost, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}), document.getElementById('root')); // z braku laku istniających userów definiuję po prostu jako stałą\n// w prawdziwej aplikacji pochodziliby z API i/lub byli w Reduksowym storze \n\nconst allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania'];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.filterUsers = e => {\n      const text = e.currentTarget.value;\n      const filteredUsers = this.getFilteredUsersForText(text);\n      this.setState({\n        filteredUsersb\n      });\n    };\n\n    this.state = {\n      filteredUsers: allUsers\n    };\n  }\n\n  getFilteredUsersForText(text) {\n    return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onInput: this.filterUsers.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(UsersList, {\n      users: this.state.filteredUsers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n  }\n\n}\n\n;\n\nconst UsersList = ({\n  users\n}) => {\n  if (users.length > 0) {\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, users.map(user => React.createElement(\"li\", {\n      key: user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, user)));\n  }\n\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"No results!\");\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 85\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/serwis/Desktop/kalkulator-spalania/src/index.js"],"names":["React","ReactDOM","Average","Cost","render","document","getElementById","allUsers","App","Component","constructor","filterUsers","e","text","currentTarget","value","filteredUsers","getFilteredUsersForText","setState","filteredUsersb","state","filter","user","toLowerCase","includes","bind","UsersList","users","length","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Average(){\n    return(\n    <div>\n        <h1>Kalkulator średniego spalania na 100 km</h1>\n        <div>Spalone paliwo w litrach: <input type=\"number\" name=\"fuel\"/></div>\n        <div>Ilość przejechanych kilometrów: <input type=\"number\" name=\"km\"/></div>\n        <div>Cena litra paliwa (opcjonalne): <input type=\"number\" name=\"cost\"/></div>\n        <button>Oblicz</button>\n    </div>\n    ); \n}\n\nfunction Cost(){\n    return(\n    <div>\n        <h1>Kalkulator kosztu przejechania trasy</h1>\n        <div>Długość planowanej trasy w kilometrach: <input type=\"number\" name=\"km\"/></div>\n        <div>Średnie spalanie w litrach na 100 km: <input type=\"number\" name=\"fuel\"/></div>\n        <div>Cena litra paliwa: <input type=\"number\" name=\"cost\"/></div>\n        <button>Oblicz</button>\n        <Average />\n    </div>\n    ); \n    \n}\n\n\nReactDOM.render(<Cost />, document.getElementById('root'));\n\n\n\n// z braku laku istniających userów definiuję po prostu jako stałą\n// w prawdziwej aplikacji pochodziliby z API i/lub byli w Reduksowym storze \nconst allUsers = ['Michal', 'Kasia', 'Jacek', 'Marta', 'Tomek', 'Ania'];\n\nclass App extends React.Component {\n  constructor() {\n    super();    \n    \n    this.state = {\n      filteredUsers: allUsers\n    };\n  }\n\n  filterUsers = (e) => {\n    const text = e.currentTarget.value;\n    const filteredUsers = this.getFilteredUsersForText(text)\n    this.setState({\n      filteredUsersb\n    })\n  }\n  \n  getFilteredUsersForText(text) {\n    return allUsers.filter(user => user.toLowerCase().includes(text.toLowerCase()))\n  }\n  \n  render () {\n    return (\n      <div>\n        <input onInput={this.filterUsers.bind(this)} />\n        <UsersList users={this.state.filteredUsers} />\n      </div>\n    );\n  }\n};\n\nconst UsersList = ({ users }) => {\n  if (users.length > 0) {\n    return (\n      <ul>\n        {users.map(user => <li key={user}>{user}</li>)}\n      </ul>\n    );\n  }\n\n  return (\n    <p>No results!</p>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}